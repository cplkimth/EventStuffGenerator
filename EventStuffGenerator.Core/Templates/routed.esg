#region [EN] event
public static readonly RoutedEvent [EN]Event = EventManager.RegisterRoutedEvent(
name: "[EN]", 
routingStrategy: RoutingStrategy.Bubble, 
handlerType: typeof([EN]EventHandler), 
ownerType: typeof(/*ContainerType*/));

public event [EN]EventHandler [EN]
{
    add => AddHandler([EN]Event, value);
    remove => RemoveHandler([EN]Event, value);
}

protected virtual void On[EN]([EN]EventArgs e)
{
	 RaiseEvent(e);
}

private [EN]EventArgs On[EN](<*[AT] [AC] :: , *>)
{
	[EN]EventArgs args = new [EN]EventArgs([EN]Event, <*[AC] :: , *>);
    On[EN](args);

    return args;
}

[BC]private [EN]EventArgs On[EN]ForOut()
{
	[EN]EventArgs args = new [EN]EventArgs([EN]Event);
    On[EN](args);

    return args;
}[EC]

public delegate void [EN]EventHandler(object sender, [EN]EventArgs e);

public class [EN]EventArgs : RoutedEventArgs
{
	<*public [AT] [AP] { get; set;} :: [N]*>

	[BC]public [EN]EventArgs(RoutedEvent routedEvent) : base(routedEvent)
    {
	}
	
	public [EN]EventArgs(RoutedEvent routedEvent, <*[AT] [AC] :: , *>) : this(routedEvent)
    {
		<*[AP] = [AC]; :: [N]*>
	}[EC]
}
#endregion